{"version":3,"sources":["Molecules/Footer/Footer.tsx","Store/Store.tsx","Molecules/Header/Header.tsx","Atoms/Spinner/Spinner.tsx","Atoms/Card/Card.tsx","Molecules/Toolbar/Toolbar.tsx","Services/PostApi/api.ts","Organisms/ClinicView/ClinicView.tsx","Organisms/NewsfeedView/NewsfeedView.tsx","Router/PrivateRoute.tsx","Router/Router.tsx","Organisms/App/App.tsx","serviceWorker.ts","index.tsx"],"names":["Footer","className","breakpoints","createBreakpoints","getPixelSize","x","theme","createMuiTheme","palette","primary","main","secondary","overrides","MuiButton","root","fontSize","minWidth","minHeight","up","AuthContext","createContext","isAuthed","Store","props","children","useState","authContext","setAuthContext","Provider","value","ThemeProvider","Header","useContext","Button","variant","color","href","onClick","Spinner","cx","cy","r","Card","Toolbar","location","disabled","publicPosts","name","time","content","isVenting","reacts","wow","haha","like","sad","clinicalLogs","successfulCall","Math","round","random","ClinicView","clinicLogs","setClinicLogs","error","setError","useEffect","Promise","resolve","reject","setTimeout","then","posts","catch","map","post","NewsfeedView","setPublicPosts","authState","PrivateRoute","component","rest","Component","render","innerProps","to","Router","basename","path","exact","App","Boolean","window","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.7766f52f.chunk.js","sourcesContent":["import React, { ReactElement } from 'react';\nimport './Footer.scss';\n\nconst Footer = (): ReactElement => (\n  <footer className=\"app-footer\">\n    <p>\n      Made as part of a coding challenge\n    </p>\n  </footer>\n);\n\nexport default Footer;\n","import React, { ReactElement, useState, createContext } from 'react';\nimport { ThemeProvider, createMuiTheme, Theme } from '@material-ui/core/styles';\n\nimport createBreakpoints from '@material-ui/core/styles/createBreakpoints';\n\n/**\n * xs, extra-small: 0px\n * sm, small: 600px\n * md, medium: 960px\n * lg, large: 1280px\n * xl, extra-large: 1920px\n */\nconst breakpoints = createBreakpoints({});\n\nconst getPixelSize = (x: number): string => `${x * 8}px`;\n\nconst theme: Theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#546A7B',\n    },\n    secondary: {\n      main: '#87AEB5',\n    },\n  },\n  overrides: {\n    MuiButton: {\n      root: {\n        fontSize: '14px',\n        minWidth: '100%',\n        minHeight: getPixelSize(6),\n        [breakpoints.up('md')]: {\n          minWidth: getPixelSize(25),\n        },\n      },\n    },\n  },\n});\n\nexport const AuthContext = createContext<any>({ isAuthed: false });\n\nconst Store = (props: {children: any}): ReactElement => {\n  const { children } = props;\n  const [authContext, setAuthContext] = useState({ isAuthed: false });\n\n  return (\n    <>\n      <AuthContext.Provider value={[authContext, setAuthContext]}>\n        <ThemeProvider theme={theme}>\n          {children}\n        </ThemeProvider>\n      </AuthContext.Provider>\n    </>\n  );\n};\n\nexport default Store;\n","import React, { ReactElement, useContext } from 'react';\nimport './Header.scss';\nimport Button from '@material-ui/core/Button';\nimport { AuthContext } from '../../Store/Store';\n\nconst Header = (): ReactElement => {\n  const [authContext, setAuthContext] = useContext(AuthContext);\n\n  const logInUser = (): void => {\n    setAuthContext({ isAuthed: true });\n  };\n\n  return (\n    <header className=\"app-header\">\n      <div className=\"app-header_top-bar\" />\n      <div className=\"app-header_bottom-bar\">\n        <div className=\"container\">\n          <h1>South Yarra Health and Wellbeing Clinic</h1>\n          {authContext.isAuthed\n            ? <p>Welcome Chris</p>\n            : <Button className=\"log-in-button\" variant=\"contained\" color=\"primary\" href=\"#/auth\" onClick={logInUser}>LOGIN</Button>}\n        </div>\n      </div>\n    </header>\n  );\n};\n\nexport default Header;\n","import React, { ReactElement } from 'react';\nimport './Spinner.scss';\n\nconst Spinner: React.FC = (): ReactElement => (\n  <div className=\"survivor loading-spinner-container\">\n    <div className=\"loading-spinner\">\n      <svg className=\"loading-spinner-rear\"><circle cx=\"50%\" cy=\"50%\" r=\"18px\" /></svg>\n      <svg className=\"loading-spinner-front\"><circle cx=\"50%\" cy=\"50%\" r=\"18px\" /></svg>\n    </div>\n  </div>\n);\n\nexport default Spinner;\n","import React, { ReactElement, PropsWithChildren } from 'react';\nimport './Card.scss';\n\nconst Card: React.FC = (props: PropsWithChildren<any>): ReactElement => {\n  const { children } = props;\n\n  return (\n    <div className=\"card-container\">\n      {children}\n    </div>\n  );\n};\n\nexport default Card;\n","import React, { ReactElement } from 'react';\nimport Button from '@material-ui/core/Button';\nimport './Toolbar.scss';\n\ntype Location = 'newsfeed' | 'clinic';\n\nconst Toolbar = (props: {location: Location}): ReactElement => {\n  const { location } = props;\n  return (\n    <nav className=\"navigation-toolbar\">\n      <Button variant=\"contained\" color=\"primary\" href=\"#/newsfeed\" disabled={location === 'newsfeed'}>Newsfeed</Button>\n      <Button variant=\"contained\" color=\"primary\" href=\"#/clinic\" disabled={location === 'clinic'}>Clinical Log</Button>\n    </nav>\n  );\n};\nexport default Toolbar;\n","/* eslint-disable max-len */\n/* eslint-disable object-curly-newline */\nimport { PublicPost, Post } from './models';\n\nconst publicPosts: PublicPost[] = [\n  {\n    name: 'Enzo Brooks',\n    time: '2020-06-12T01:30:35.096Z',\n    content: 'Up to one-third of patients experience markers of distress during palliative ventilator withdrawal, study finds',\n    isVenting: false,\n    reacts: { wow: 12, haha: 0, like: 5, sad: 0 },\n  },\n  {\n    name: 'Chris Redfield',\n    time: '2020-06-12T01:30:35.096Z',\n    content: 'Scientists have discovered a population of neurons that control hibernation-like behavior, or torpor, in mice',\n    isVenting: false,\n    reacts: { wow: 0, haha: 0, like: 12, sad: 0 },\n  },\n  {\n    name: 'Enzo Brooks',\n    time: '2020-06-12T01:30:35.096Z',\n    content: 'Today, @Jerry is officially cancer free!',\n    isVenting: false,\n    reacts: { wow: 0, haha: 0, like: 12, sad: 0 },\n  },\n];\nconst clinicalLogs: Post[] = [\n  {\n    name: 'Chris Redfield',\n    time: '2020-06-12T01:30:35.096Z',\n    content: 'Patient in room 78 blood pressure is 128/70',\n  },\n  {\n    name: 'Samantha Yule',\n    time: '2020-06-12T01:30:35.096Z',\n    content: 'Patient in room 47 is showing decreased signs of self awareness',\n  },\n  {\n    name: 'Samantha Yule',\n    time: '2020-06-12T01:30:35.096Z',\n    content: 'Patient in room 78 blood pressure is 134/96',\n  },\n  {\n    name: 'Enzo Brooks',\n    time: '2020-06-12T01:30:35.096Z',\n    content: 'Patient in room 78 blood pressure is 139/104',\n  },\n  {\n    name: 'Samantha Yule',\n    time: '2020-06-12T01:30:35.096Z',\n    content: 'Patient in room 78 blood pressure is 119/79',\n  },\n];\n\nconst successfulCall = (): boolean => (Math.round(Math.random() * 100)) < 95; // simulating a network failure\n\nexport const getPublicPosts = (): Promise<PublicPost[]> => new Promise((resolve, reject) => setTimeout(() => (successfulCall() ? resolve(publicPosts) : reject()), 1000));\n\nexport const getClinicalLog = (): Promise<Post[]> => new Promise((resolve, reject) => setTimeout(() => (successfulCall() ? resolve(clinicalLogs) : reject()), 1000));\n","import React, { useEffect, useState, ReactElement } from 'react';\nimport './ClinicView.scss';\nimport Spinner from '../../Atoms/Spinner/Spinner';\nimport Card from '../../Atoms/Card/Card';\nimport Toolbar from '../../Molecules/Toolbar/Toolbar';\nimport { Post } from '../../Services/PostApi/models';\nimport { getClinicalLog } from '../../Services/PostApi/api';\n\n// A reminder that we don't need to check auth state here\n\nconst ClinicView = (): ReactElement => {\n  const [clinicLogs, setClinicLogs] = useState<Post[] | null>(null);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    getClinicalLog()\n      .then((posts: Post[]) => setClinicLogs(posts))\n      .catch(() => setError('Failed to load posts'));\n  }, []);\n\n  return error ? (<Card>{error}</Card>)\n    : (\n      <div className=\"killer-container\">\n        <Card><Toolbar location=\"clinic\" /></Card>\n        <h2>Clinical View</h2>\n        { clinicLogs\n          ? (\n            <div className=\"post-container\">\n              {clinicLogs && clinicLogs.map((post: Post) => <Card><p>{post.content}</p></Card>)}\n            </div>\n          )\n          : <Spinner />}\n      </div>\n    );\n};\n\nexport default ClinicView;\n","import React, {\n  useEffect, useState, ReactElement, useContext,\n} from 'react';\nimport './NewsfeedView.scss';\nimport Spinner from '../../Atoms/Spinner/Spinner';\nimport Card from '../../Atoms/Card/Card';\nimport Toolbar from '../../Molecules/Toolbar/Toolbar';\nimport { AuthContext } from '../../Store/Store';\nimport { getPublicPosts } from '../../Services/PostApi/api';\nimport { PublicPost } from '../../Services/PostApi/models';\n\nconst NewsfeedView = (): ReactElement => {\n  const [publicPosts, setPublicPosts] = useState<PublicPost[] | null>(null);\n  const [error, setError] = useState<string | null>(null);\n  const [authState] = useContext(AuthContext);\n\n  useEffect(() => {\n    getPublicPosts()\n      .then((posts: PublicPost[]) => setPublicPosts(posts))\n      .catch(() => setError('Failed to load posts'));\n  }, []);\n\n  // TODO find a better way to handle errors than nested statements\n  // TODO make global error panel\n  return error ? (<Card>{error}</Card>)\n    : (\n      <div className=\"killer-container\">\n        { authState.isAuthed && <Card><Toolbar location=\"newsfeed\" /></Card> }\n        <h2>Newsfeed</h2>\n        { publicPosts\n          ? (\n            <div className=\"post-container\">\n              {publicPosts && publicPosts.map((post: PublicPost) => <Card><p>{post.content}</p></Card>)}\n            </div>\n          )\n          : <Spinner />}\n      </div>\n    );\n};\n\nexport default NewsfeedView;\n","/* eslint-disable react/jsx-props-no-spreading */\nimport React, { useContext, ReactElement } from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { AuthContext } from '../Store/Store';\n\n// TODO: find a better way to implement private routes than playing the assignment game\n\nconst PrivateRoute = (props: any): ReactElement => {\n  const { component, ...rest } = props;\n  const Component = component;\n  const [authContext] = useContext(AuthContext);\n\n  return (\n    <Route\n      {...rest}\n      render={(innerProps): ReactElement => (\n        authContext.isAuthed === true\n          ? <Component {...innerProps} />\n          : <Redirect to=\"/newsfeed\" />\n      )}\n    />\n  );\n};\n\nexport default PrivateRoute;\n","import React, { ReactElement } from 'react';\nimport {\n  Switch,\n  Route,\n  HashRouter,\n  Redirect,\n} from 'react-router-dom';\n\n\nimport ClinicView from '../Organisms/ClinicView/ClinicView';\nimport NewsfeedView from '../Organisms/NewsfeedView/NewsfeedView';\nimport PrivateRoute from './PrivateRoute';\n\nconst Router = (): ReactElement => (\n  <HashRouter basename=\"/\">\n    <Switch>\n      <PrivateRoute path=\"/clinic\" component={ClinicView} />\n      <Route path=\"/newsfeed\" component={NewsfeedView} />\n      <Route path=\"/*\" exact>\n        <Redirect to=\"/newsfeed\" />\n      </Route>\n    </Switch>\n  </HashRouter>\n);\n\n\nexport default Router;\n","import React, { ReactElement } from 'react';\nimport './App.scss';\n\nimport Footer from '../../Molecules/Footer/Footer';\nimport Header from '../../Molecules/Header/Header';\nimport Router from '../../Router/Router';\nimport Store from '../../Store/Store';\n\nconst App = (): ReactElement => (\n  <div className=\"app-container\">\n    <Store>\n      <Header />\n      <section className=\"app\">\n        <Router />\n      </section>\n      <Footer />\n    </Store>\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    // TODO: https://github.com/facebook/create-react-app/issues/8863\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.href,\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './Organisms/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}