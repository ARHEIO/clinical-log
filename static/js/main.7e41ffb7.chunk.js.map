{"version":3,"sources":["Molecules/Footer/Footer.tsx","Store/Store.tsx","Molecules/Header/Header.tsx","Atoms/Spinner/Spinner.tsx","Atoms/Card/Card.tsx","Molecules/Toolbar/Toolbar.tsx","Molecules/PostForm/PostForm.tsx","Atoms/IconContainer/IconContainer.tsx","Atoms/TimeContainer/TimeContainer.tsx","Molecules/MedicalLogCard/MedicalLogCard.tsx","Services/PostApi/api.ts","Organisms/ClinicView/ClinicView.tsx","Atoms/ReactComponent/ReactComponent.tsx","Molecules/PublicPostCard/PublicPostCard.tsx","Organisms/NewsfeedView/NewsfeedView.tsx","Router/PrivateRoute.tsx","Router/Router.tsx","Organisms/App/App.tsx","serviceWorker.ts","index.tsx"],"names":["Footer","className","breakpoints","createBreakpoints","getPixelSize","x","theme","createMuiTheme","palette","primary","main","secondary","overrides","MuiButton","root","fontSize","minWidth","minHeight","up","AuthContext","createContext","isAuthed","Store","props","children","useState","authContext","setAuthContext","Provider","value","ThemeProvider","Header","useContext","Button","variant","color","href","onClick","Spinner","cx","cy","r","Card","additionalClassnames","Toolbar","location","disabled","PostForm","onSubmitParent","isPublic","validate","values","errors","postContent","includes","initialValues","ventCheckbox","onSubmit","a","innerProps","touched","isSubmitting","handleChange","handleBlur","handleSubmit","TextField","id","placeholder","type","onChange","onBlur","fullWidth","FormControlLabel","control","Checkbox","isVent","label","IconContainer","imgSrc","username","src","alt","firstName","lastName","getAbsoluteDate","date","Intl","DateTimeFormat","day","month","hour","minute","format","Date","getRelativeDate","timeDifference","now","getTime","oneSecond","oneMinute","Math","floor","oneHour","oneDay","TimeContainer","time","relative","content","setContent","useEffect","parsedDate","setInterval","MedicalLogCard","post","name","publicPosts","toString","isVenting","reacts","wow","haha","like","sad","clinicalLogs","successfulCall","round","random","addReact","index","reactType","Promise","resolve","length","ClinicView","clinicLogs","setClinicLogs","error","setError","getPosts","reject","setTimeout","then","posts","catch","newLog","toISOString","map","key","ReactComponent","reactHandler","IconButton","e","preventDefault","ThumbUp","TagFaces","Hotel","SentimentVeryDissatisfied","PublicPostCard","clickHandler","eventType","NewsfeedView","setPublicPosts","authState","postNewReact","reactEvent","response","newPost","unshift","addNewPublicPost","PrivateRoute","component","rest","Component","render","to","Router","basename","path","exact","App","Boolean","window","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"+UAWeA,G,kBARA,kBACb,4BAAQC,UAAU,cAChB,oE,0DCOEC,E,MAAcC,GAAkB,IAEhCC,EAAe,SAACC,GAAD,gBAA8B,EAAJA,EAA1B,OAEfC,EAAeC,YAAe,CAClCC,QAAS,CACPC,QAAS,CACPC,KAAM,WAERC,UAAW,CACTD,KAAM,YAGVE,UAAW,CACTC,UAAW,CACTC,KAAK,aACHC,SAAU,OACVC,SAAU,OACVC,UAAWb,EAAa,IACvBF,EAAYgB,GAAG,MAAQ,CACtBF,SAAUZ,EAAa,UAOpBe,EAAcC,wBAAmB,CAAEC,UAAU,IAiB3CC,EAfD,SAACC,GAA0C,IAC/CC,EAAaD,EAAbC,SAD8C,EAEhBC,mBAAS,CAAEJ,UAAU,IAFL,mBAE/CK,EAF+C,KAElCC,EAFkC,KAItD,OACE,oCACE,kBAACR,EAAYS,SAAb,CAAsBC,MAAO,CAACH,EAAaC,IACzC,kBAACG,EAAA,EAAD,CAAexB,MAAOA,GACnBkB,MCtBIO,EAtBA,WAAqB,IAAD,EACKC,qBAAWb,GADhB,mBAC1BO,EAD0B,KACbC,EADa,KAOjC,OACE,4BAAQ1B,UAAU,cAChB,yBAAKA,UAAU,uBACf,yBAAKA,UAAU,yBACb,yBAAKA,UAAU,aACb,uEACCyB,EAAYL,SACT,4CACA,kBAACY,EAAA,EAAD,CAAQhC,UAAU,gBAAgBiC,QAAQ,YAAYC,MAAM,UAAUC,KAAK,SAASC,QAZ9E,WAChBV,EAAe,CAAEN,UAAU,MAWjB,a,wBCRCiB,G,YATW,kBACxB,yBAAKrC,UAAU,sCACb,yBAAKA,UAAU,mBACb,yBAAKA,UAAU,wBAAuB,4BAAQsC,GAAG,MAAMC,GAAG,MAAMC,EAAE,UAClE,yBAAKxC,UAAU,yBAAwB,4BAAQsC,GAAG,MAAMC,GAAG,MAAMC,EAAE,cCM1DC,G,MAVF,SAACnB,GAAuE,IAC3EC,EAAwBD,EAAxBC,SAAUvB,EAAcsB,EAAdtB,UACZ0C,EAAuB1C,EAAS,WAAOA,GAAc,GAC3D,OACE,yBAAKA,UAAS,wBAAmB0C,IAC9BnB,KCUQoB,G,OAXC,SAACrB,GAA+C,IACtDsB,EAAatB,EAAbsB,SACR,OACE,kBAAC,EAAD,KACE,yBAAK5C,UAAU,sBACb,kBAACgC,EAAA,EAAD,CAAQC,QAAQ,YAAYC,MAAM,UAAUC,KAAK,aAAaU,SAAuB,aAAbD,GAAxE,YACA,kBAACZ,EAAA,EAAD,CAAQC,QAAQ,YAAYC,MAAM,UAAUC,KAAK,WAAWU,SAAuB,WAAbD,GAAtE,oB,qEC6DOE,EAlEE,SAACxB,GAAyE,IACjFyB,EAA6BzB,EAA7ByB,eAAgBC,EAAa1B,EAAb0B,SAYxB,OACE,kBAAC,EAAD,KACE,kBAAC,IAAD,CACEC,SAbW,SAACC,GAChB,IAAMC,EAAmC,GAMzC,OALKD,EAAOE,aAEAJ,GAAYE,EAAOE,YAAYC,SAAS,OAClDF,EAAOC,YAAc,8CAFrBD,EAAOC,YAAc,2BAIhBD,GAOHG,cAAe,CAAEF,YAAa,GAAIG,cAAc,GAChDC,SAAQ,uCAAE,WAAON,GAAP,SAAAO,EAAA,+EAAiCV,EAAeG,IAAhD,2CAAF,wDAEP,SAACQ,GAAgC,IAE9BR,EAOEQ,EAPFR,OACAS,EAMED,EANFC,QACAR,EAKEO,EALFP,OACAS,EAIEF,EAJFE,aACAC,EAGEH,EAHFG,aACAC,EAEEJ,EAFFI,WACAC,EACEL,EADFK,aAEF,OACE,0BAAMP,SAAUO,GACd,kBAACC,EAAA,EAAD,CACEC,GAAG,cACHC,YAAY,kBACZC,KAAK,OACLvC,MAAOsB,EAAOE,YACdgB,SAAUP,EACV5B,QAAQ,WACRoC,OAAQP,EACRQ,WAAS,EACTtE,UAAU,gBAEXmD,EAAOC,aAAeO,EAAQP,aAC7B,yBAAKpD,UAAU,kBAAkBmD,EAAOC,aAE1C,yBAAKpD,UAAU,mBACZgD,GACC,kBAACuB,EAAA,EAAD,CACEvE,UAAU,2BACViE,GAAG,eACHO,QAAS,kBAACC,EAAA,EAAD,CAAU7C,MAAOsB,EAAOwB,OAAQN,SAAUP,EAAcI,GAAG,iBACpEU,MAAM,qBAGV,kBAAC3C,EAAA,EAAD,CAAQhC,UAAU,0BAA0BkC,MAAM,UAAUD,QAAQ,YAAYkC,KAAK,SAAStB,SAAUe,GAAxG,iBCnDDgB,G,cARO,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,SAAX,OACpB,yBAAK9E,UAAU,kBACZ6E,EACG,yBAAKE,IAAKF,EAAQG,IAAG,mBAAcF,EAASG,UAAvB,YAAoCH,EAASI,YAClE,qCAAOJ,EAASG,UAAU,IAA1B,OAA+BH,EAASI,SAAS,QCJnDC,G,OAAkB,SAACC,GAOvB,OAAO,IAAIC,KAAKC,eAAe,QANf,CACdC,IAAK,UACLC,MAAO,QACPC,KAAM,UACNC,OAAQ,YAEuCC,OAAO,IAAIC,KAAKR,MAS7DS,EAAkB,SAACT,GACvB,IAAMU,EAAiBF,KAAKG,MAAQ,IAAIH,KAAKR,GAAMY,UACnD,OAAIF,EAPYG,IAQP,WACHH,EARQI,KASJJ,EAAkBI,KAAkB,eAArC,UAAyDC,KAAKC,MAAMN,EAV7DG,KAUP,gBACHH,EATOO,MAUHP,EAAiBO,KAAe,aAAjC,UAAmDF,KAAKC,MAAMN,EAXzDI,MAWL,cAEDJ,EAAiBQ,OAAc,YAAhC,UAAiDH,KAAKC,MAAMN,EAZtDO,OAYN,cAwBME,EAhBO,SAAC,GAA0E,IAAxEC,EAAuE,EAAvEA,KAAMC,EAAiE,EAAjEA,SAAiE,EAChEjF,mBAAc,MADkD,mBACvFkF,EADuF,KAC9EC,EAD8E,KAW9F,OARAC,qBAAU,WACR,IAAMC,EAAaJ,EAAWZ,EAAgBW,GAAQrB,EAAgBqB,GACtEG,EAAWE,GACPJ,GACFK,aAAY,kBAAMH,EAAWd,EAAgBW,MAAQ,OAEtD,CAACG,EAAYH,EAAMC,IAGpB,2BAAIC,ICzBOK,EAfQ,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OACrB,kBAAC,EAAD,CAAMhH,UAAU,eACd,yBAAKA,UAAU,mBACb,yBAAKA,UAAU,yBACb,kBAAC,EAAD,CAAe8E,SAAUkC,EAAKC,OAC9B,qCAAOD,EAAKC,KAAKhC,UAAjB,YAA8B+B,EAAKC,KAAK/B,YAE1C,yBAAKlF,UAAU,yBACb,kBAAC,EAAD,CAAewG,KAAMQ,EAAKR,SAG9B,uBAAGxG,UAAU,wBAAwBgH,EAAKN,WCdxCQ,EAA4B,CAChC,CACEjD,GAAI,EACJgD,KAAM,CACJhC,UAAW,OACXC,SAAU,UAEZsB,MAAM,IAAIZ,MAAOuB,WACjBT,QAAS,kHACTU,WAAW,EACXC,OAAQ,CAAEC,IAAK,GAAIC,KAAM,EAAGC,KAAM,EAAGC,IAAK,IAE5C,CACExD,GAAI,EACJgD,KAAM,CACJhC,UAAW,QACXC,SAAU,YAEZsB,KAAM,2BACNE,QAAS,gHACTU,WAAW,EACXC,OAAQ,CAAEC,IAAK,EAAGC,KAAM,EAAGC,KAAM,GAAIC,IAAK,IAE5C,CACExD,GAAI,EACJgD,KAAM,CACJhC,UAAW,QACXC,SAAU,YAEZsB,KAAM,2BACNE,QAAS,gHACTU,WAAW,EACXC,OAAQ,CAAEC,IAAK,EAAGC,KAAM,EAAGC,KAAM,GAAIC,IAAK,IAE5C,CACExD,GAAI,EACJgD,KAAM,CACJhC,UAAW,OACXC,SAAU,UAEZsB,KAAM,2BACNE,QAAS,2CACTU,WAAW,EACXC,OAAQ,CAAEC,IAAK,EAAGC,KAAM,EAAGC,KAAM,GAAIC,IAAK,KAGxCC,EAAuB,CAC3B,CACEzD,GAAI,EACJgD,KAAM,CACJhC,UAAW,QACXC,SAAU,YAEZsB,KAAM,2BACNE,QAAS,+CAEX,CACEzC,GAAI,EACJgD,KAAM,CACJhC,UAAW,WACXC,SAAU,QAEZsB,KAAM,2BACNE,QAAS,mEAEX,CACEzC,GAAI,EACJgD,KAAM,CACJhC,UAAW,WACXC,SAAU,QAEZsB,KAAM,2BACNE,QAAS,+CAEX,CACEzC,GAAI,EACJgD,KAAM,CACJhC,UAAW,OACXC,SAAU,UAEZsB,KAAM,2BACNE,QAAS,gDAEX,CACEzC,GAAI,EACJgD,KAAM,CACJhC,UAAW,WACXC,SAAU,QAEZsB,KAAM,2BACNE,QAAS,gDAIPiB,EAAiB,kBAAgBxB,KAAKyB,MAAsB,IAAhBzB,KAAK0B,UAAmB,KAY7DC,EAAW,SAACC,EAAeC,GAAhB,OAA6D,IAAIC,SAAQ,SAACC,GAChG,OAAQF,GACN,IAAK,OACHd,EAAYA,EAAYiB,OAASJ,GAAOV,OAAOG,OAC/C,MACF,IAAK,OACHN,EAAYA,EAAYiB,OAASJ,GAAOV,OAAOE,OAC/C,MACF,IAAK,MACHL,EAAYA,EAAYiB,OAASJ,GAAOV,OAAOC,MAC/C,MACF,IAAK,MACHJ,EAAYA,EAAYiB,OAASJ,GAAOV,OAAOI,MAGnDS,EAAQhB,OC3DKkB,EAtDI,WAAqB,IAAD,EACD5G,mBAAwB,MADvB,mBAC9B6G,EAD8B,KAClBC,EADkB,OAEX9G,mBAAwB,MAFb,mBAE9B+G,EAF8B,KAEvBC,EAFuB,KAI/BC,EAAW,WDkHkC,IAAIR,SAAQ,SAACC,EAASQ,GAAV,OAAqBC,YAAW,kBAAOhB,IAAmBO,EAAQR,GAAgBgB,MAAW,QChHvJE,MAAK,SAACC,GAAD,OAAmBP,EAAcO,MACtCC,OAAM,kBAAMN,EAAS,4BAsB1B,OAJA5B,qBAAU,WACR6B,MACC,IAEIF,EACL,kBAAC,EAAD,KACGA,EACA,IACD,kBAACvG,EAAA,EAAD,CAAQC,QAAQ,WAAWC,MAAM,YAAYE,QAASqG,GAAtD,cAIA,yBAAKzI,UAAU,oBACb,8CACA,kBAAC,EAAD,CAAS4C,SAAS,WAClB,iDACA,kBAAC,EAAD,CAAUG,eA/BO,SAACK,GACtB,IAGM2F,EAAe,CACnB9E,GAAIoE,EAAaA,EAAW,GAAGpE,GAAK,EAAI,EACxCyC,QAAStD,EAAYA,YACrB6D,KANwB,CACxBhC,UAAW,QAASC,SAAU,YAM9BsB,MAAM,IAAIZ,MAAOoD,eAInBX,GAAcC,EAAc,CAACS,GAAF,mBAAaV,QAoBpC,4CACEA,EAEE,yBAAKrI,UAAU,kBACZqI,GAAcA,EAAWY,KAAI,SAACjC,EAAYe,GAAb,OAAuB,kBAAC,EAAD,CAAgBmB,IAAG,eAAUnB,GAASf,KAAMA,QAGnG,kBAAC,EAAD,Q,oECKGmC,EA5DQ,SAAC7H,GAAmE,IACjF+F,EAAyB/F,EAAzB+F,OAAQ+B,EAAiB9H,EAAjB8H,aAEhB,OACE,yBAAKpJ,UAAU,UACb,kBAACqJ,EAAA,EAAD,CACErJ,UAAU,eACVkC,MAAM,UACN+B,GAAG,OACH7B,QAAS,SAACkH,GACRA,EAAEC,iBACFH,EAAa,UAGf,kBAACI,EAAA,EAAD,CAAStH,MAAM,cACf,2BAAImF,EAAOG,OAGb,kBAAC6B,EAAA,EAAD,CACErJ,UAAU,eACVkC,MAAM,UACN+B,GAAG,OACH7B,QAAS,SAACkH,GACRA,EAAEC,iBACFH,EAAa,UAGf,kBAACK,EAAA,EAAD,CAAUvH,MAAM,cAChB,2BAAImF,EAAOE,OAGb,kBAAC8B,EAAA,EAAD,CACErJ,UAAU,eACVkC,MAAM,UACN+B,GAAG,MACH7B,QAAS,SAACkH,GACRA,EAAEC,iBACFH,EAAa,SAGf,kBAACM,EAAA,EAAD,CAAOxH,MAAM,cACb,2BAAImF,EAAOC,MAGb,kBAAC+B,EAAA,EAAD,CACErJ,UAAU,eACVkC,MAAM,UACN+B,GAAG,MACH7B,QAAS,SAACkH,GACRA,EAAEC,iBACFH,EAAa,SAGf,kBAACO,EAAA,EAAD,CAA2BzH,MAAM,cACjC,2BAAImF,EAAOI,QCzBJmC,EA3BQ,SAACtI,GAAqE,IACnF0F,EAAuB1F,EAAvB0F,KAAM6C,EAAiBvI,EAAjBuI,aAQd,OACE,kBAAC,EAAD,CAAM7J,UAAU,eACd,yBAAKA,UAAU,mBACb,yBAAKA,UAAU,yBACb,kBAAC,EAAD,CAAe8E,SAAUkC,EAAKC,OAC9B,qCAAOD,EAAKC,KAAKhC,UAAjB,YAA8B+B,EAAKC,KAAK/B,YAE1C,yBAAKlF,UAAU,yBACb,kBAAC,EAAD,CAAewG,KAAMQ,EAAKR,KAAMC,UAAQ,IACvCO,EAAKI,WAAa,2BAfR,sBAkBf,uBAAGpH,UAAU,wBAAwBgH,EAAKN,SAC1C,kBAAC,EAAD,CAAgBW,OAAQL,EAAKK,OAAQ+B,aAjBnB,SAACU,GACrBD,EAAa,CAAEC,YAAW7F,GAAI+C,EAAK/C,UC+ExB8F,EAhFM,WAAqB,IAAD,EACDvI,mBAA8B,MAD7B,mBAChC0F,EADgC,KACnB8C,EADmB,OAEbxI,mBAAwB,MAFX,mBAEhC+G,EAFgC,KAEzBC,EAFyB,OAGnBzG,qBAAWb,GAAxB+I,EAHgC,oBAKjCxB,EAAW,WJ8GwC,IAAIR,SAAQ,SAACC,EAASQ,GAAV,OAAqBC,YAAW,kBAAOhB,IAAmBO,EAAQhB,GAAewB,MAAW,QI5G5JE,MAAK,SAACC,GAAD,OAAyBmB,EAAenB,MAC7CC,OAAM,kBAAMN,EAAS,4BA0BpB0B,EAAY,uCAAG,WAAOC,GAAP,eAAA1G,EAAA,sEACIqE,EAASqC,EAAWlG,GAAIkG,EAAWL,WADvC,OACbM,EADa,OAEnBJ,EAAe,MACfA,EAAeI,GAHI,2CAAH,sDAclB,OARAxD,qBAAU,WACHM,GACHuB,MAED,CAACvB,IAIGqB,EAEH,kBAAC,EAAD,KACGA,EACA,IACD,kBAACvG,EAAA,EAAD,CAAQC,QAAQ,WAAWC,MAAM,YAAYE,QAASqG,GAAtD,cAIF,yBAAKzI,UAAU,sBACXiK,EAAU7I,UACV,oCACE,8CACA,kBAAC,EAAD,CAASwB,SAAS,aAClB,iDACA,kBAAC,EAAD,CAAUG,eApDG,SAACK,GACtB,IAMMiH,EAAsB,CAC1BpG,GAAIiD,EAAcA,EAAY,GAAGjD,GAAK,EAAI,EAC1CyC,QAAStD,EAAYA,YACrBgE,UAAWhE,EAAYG,aACvB0D,KAVwB,CACxBhC,UAAW,QAASC,SAAU,YAU9BsB,MAAM,IAAIZ,MAAOoD,cACjB3B,OAT0B,CAC1BG,KAAM,EAAGD,KAAM,EAAGD,IAAK,EAAGG,IAAK,IAW/BuC,EADE9C,EACa,CAACmD,GAAF,mBAAcnD,IAEb,CAACmD,IJ+DU,SAACA,GAAsC,IAAIpC,SAAQ,SAACC,GAClFhB,EAAYoD,QAAQD,GACpBnC,OI/DEqC,CAAiBF,IAgCiCrH,UAAQ,KAGtD,wCACEkE,EAEE,yBAAKlH,UAAU,kBACZkH,GAAeA,EAAY+B,KAC1B,SAACjC,EAAkBe,GAAnB,OAA6B,kBAAC,EAAD,CAAgBmB,IAAG,eAAUnB,GAASf,KAAMA,EAAM6C,aAAcK,QAIjG,kBAAC,EAAD,Q,QClEGM,EAjBM,SAAClJ,GAA8B,IAC1CmJ,EAAuBnJ,EAAvBmJ,UAAcC,EAD2B,YAClBpJ,EADkB,eAE3CqJ,EAAYF,EAF+B,EAG3B1I,qBAAWb,GAA1BO,EAH0C,oBAKjD,OACE,kBAAC,IAAD,iBACMiJ,EADN,CAEEE,OAAQ,SAAClH,GAAD,OACmB,IAAzBjC,EAAYL,SACR,kBAACuJ,EAAcjH,GACf,kBAAC,IAAD,CAAUmH,GAAG,mBCQVC,GAbA,kBACb,kBAAC,IAAD,CAAYC,SAAS,KACnB,kBAAC,IAAD,KACE,kBAAC,EAAD,CAAcC,KAAK,UAAUP,UAAWrC,IACxC,kBAAC,IAAD,CAAO4C,KAAK,YAAYP,UAAWV,IACnC,kBAAC,IAAD,CAAOiB,KAAK,KAAKC,OAAK,GACpB,kBAAC,IAAD,CAAUJ,GAAG,kBCCNK,GAZH,kBACV,yBAAKlL,UAAU,iBACb,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,6BAASA,UAAU,OACjB,kBAAC,GAAD,OAEF,kBAAC,EAAD,SCHcmL,QACW,cAA7BC,OAAOxI,SAASyI,UAEkB,UAA7BD,OAAOxI,SAASyI,UAEhBD,OAAOxI,SAASyI,SAASC,MAC1B,2DCZNC,IAASX,OACP,kBAAC,IAAMY,WAAP,KACE,kBAAC,GAAD,OAEFC,SAASC,eAAe,SDkIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjD,MAAK,SAACkD,GACLA,EAAaC,gBAEdjD,OAAM,SAACP,GACNyD,QAAQzD,MAAMA,EAAM0D,a","file":"static/js/main.7e41ffb7.chunk.js","sourcesContent":["import React, { ReactElement } from 'react';\nimport './Footer.scss';\n\nconst Footer = (): ReactElement => (\n  <footer className=\"app-footer\">\n    <p>\n      Made as part of a coding challenge\n    </p>\n  </footer>\n);\n\nexport default Footer;\n","import React, { ReactElement, useState, createContext } from 'react';\nimport { ThemeProvider, createMuiTheme, Theme } from '@material-ui/core/styles';\n\nimport createBreakpoints from '@material-ui/core/styles/createBreakpoints';\n\n/**\n * xs, extra-small: 0px\n * sm, small: 600px\n * md, medium: 960px\n * lg, large: 1280px\n * xl, extra-large: 1920px\n */\nconst breakpoints = createBreakpoints({});\n\nconst getPixelSize = (x: number): string => `${x * 8}px`;\n\nconst theme: Theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#546A7B',\n    },\n    secondary: {\n      main: '#87AEB5',\n    },\n  },\n  overrides: {\n    MuiButton: {\n      root: {\n        fontSize: '14px',\n        minWidth: '100%',\n        minHeight: getPixelSize(6),\n        [breakpoints.up('md')]: {\n          minWidth: getPixelSize(25),\n        },\n      },\n    },\n  },\n});\n\nexport const AuthContext = createContext<any>({ isAuthed: false });\n\nconst Store = (props: {children: any}): ReactElement => {\n  const { children } = props;\n  const [authContext, setAuthContext] = useState({ isAuthed: false });\n\n  return (\n    <>\n      <AuthContext.Provider value={[authContext, setAuthContext]}>\n        <ThemeProvider theme={theme}>\n          {children}\n        </ThemeProvider>\n      </AuthContext.Provider>\n    </>\n  );\n};\n\nexport default Store;\n","import React, { ReactElement, useContext } from 'react';\nimport './Header.scss';\nimport Button from '@material-ui/core/Button';\nimport { AuthContext } from '../../Store/Store';\n\nconst Header = (): ReactElement => {\n  const [authContext, setAuthContext] = useContext(AuthContext);\n\n  const logInUser = (): void => {\n    setAuthContext({ isAuthed: true });\n  };\n\n  return (\n    <header className=\"app-header\">\n      <div className=\"app-header_top-bar\" />\n      <div className=\"app-header_bottom-bar\">\n        <div className=\"container\">\n          <h1>South Yarra Health and Wellbeing Clinic</h1>\n          {authContext.isAuthed\n            ? <p>Welcome Chris</p>\n            : <Button className=\"log-in-button\" variant=\"contained\" color=\"primary\" href=\"#/auth\" onClick={logInUser}>LOGIN</Button>}\n        </div>\n      </div>\n    </header>\n  );\n};\n\nexport default Header;\n","import React, { ReactElement } from 'react';\nimport './Spinner.scss';\n\nconst Spinner: React.FC = (): ReactElement => (\n  <div className=\"survivor loading-spinner-container\">\n    <div className=\"loading-spinner\">\n      <svg className=\"loading-spinner-rear\"><circle cx=\"50%\" cy=\"50%\" r=\"18px\" /></svg>\n      <svg className=\"loading-spinner-front\"><circle cx=\"50%\" cy=\"50%\" r=\"18px\" /></svg>\n    </div>\n  </div>\n);\n\nexport default Spinner;\n","import React, { ReactElement, ReactNode } from 'react';\nimport './Card.scss';\n\nconst Card = (props: { className?: string; children?: ReactNode }): ReactElement => {\n  const { children, className } = props;\n  const additionalClassnames = className ? ` ${className}` : '';\n  return (\n    <div className={`card-container${additionalClassnames}`}>\n      {children}\n    </div>\n  );\n};\n\nexport default Card;\n","import React, { ReactElement } from 'react';\nimport Button from '@material-ui/core/Button';\nimport './Toolbar.scss';\nimport Card from '../../Atoms/Card/Card';\n\ntype Location = 'newsfeed' | 'clinic';\n\nconst Toolbar = (props: {location: Location}): ReactElement => {\n  const { location } = props;\n  return (\n    <Card>\n      <nav className=\"navigation-toolbar\">\n        <Button variant=\"contained\" color=\"primary\" href=\"#/newsfeed\" disabled={location === 'newsfeed'}>Newsfeed</Button>\n        <Button variant=\"contained\" color=\"primary\" href=\"#/clinic\" disabled={location === 'clinic'}>Clinical Log</Button>\n      </nav>\n    </Card>\n  );\n};\nexport default Toolbar;\n","import React, { ReactElement, ReactNode } from 'react';\nimport Button from '@material-ui/core/Button';\nimport { Formik } from 'formik';\n\nimport './PostForm.scss';\nimport { TextField, Checkbox, FormControlLabel } from '@material-ui/core';\nimport Card from '../../Atoms/Card/Card';\n\nconst PostForm = (props: {onSubmitParent: Function; isPublic?: boolean}): ReactElement => {\n  const { onSubmitParent, isPublic } = props;\n\n  const validate = (values: {postContent: string}): any => {\n    const errors: { postContent?: string } = {};\n    if (!values.postContent) {\n      errors.postContent = 'Post content is required';\n    } else if (!isPublic && values.postContent.includes('@')) {\n      errors.postContent = 'Mentioned are not allowed in clinical logs';\n    }\n    return errors;\n  };\n\n  return (\n    <Card>\n      <Formik\n        validate={validate}\n        initialValues={{ postContent: '', ventCheckbox: false }}\n        onSubmit={async (values): Promise<void> => onSubmitParent(values)}\n      >\n        {(innerProps: any): ReactNode => {\n          const {\n            values,\n            touched,\n            errors,\n            isSubmitting,\n            handleChange,\n            handleBlur,\n            handleSubmit,\n          } = innerProps;\n          return (\n            <form onSubmit={handleSubmit}>\n              <TextField\n                id=\"postContent\"\n                placeholder=\"Enter your post\"\n                type=\"text\"\n                value={values.postContent}\n                onChange={handleChange}\n                variant=\"outlined\"\n                onBlur={handleBlur}\n                fullWidth\n                className=\"post__input\"\n              />\n              {errors.postContent && touched.postContent && (\n                <div className=\"input-feedback\">{errors.postContent}</div>\n              )}\n              <div className=\"post-submission\">\n                {isPublic && (\n                  <FormControlLabel\n                    className=\"post-submission__venting\"\n                    id=\"ventCheckbox\"\n                    control={<Checkbox value={values.isVent} onChange={handleChange} id=\"ventCheckbox\" />}\n                    label=\"I'm just venting\"\n                  />\n                )}\n                <Button className=\"post-submission__submit\" color=\"primary\" variant=\"contained\" type=\"submit\" disabled={isSubmitting}>\n                  Submit\n                </Button>\n              </div>\n            </form>\n          );\n        }}\n      </Formik>\n    </Card>\n  );\n};\nexport default PostForm;\n","import React, { ReactElement } from 'react';\nimport './IconContainer.scss';\nimport { Name } from '../../Services/PostApi/models';\n\nconst IconContainer = ({ imgSrc, username }: {imgSrc?: string; username: Name}): ReactElement => (\n  <div className=\"icon-container\">\n    {imgSrc\n      ? <img src={imgSrc} alt={`Icon for ${username.firstName} ${username.lastName}`} />\n      : <p>{`${username.firstName[0]}${username.lastName[0]}`}</p>}\n  </div>\n);\n\nexport default IconContainer;\n","import React, { ReactElement, useEffect, useState } from 'react';\nimport './TimeContainer.scss';\n\n// Will adjust posting data/time based on timezone\nconst getAbsoluteDate = (date: string): string => {\n  const options = {\n    day: 'numeric',\n    month: 'short',\n    hour: 'numeric',\n    minute: 'numeric',\n  };\n  return new Intl.DateTimeFormat('en-AU', options).format(new Date(date));\n};\n\nconst oneSecond = 1000;\nconst oneMinute = oneSecond * 60;\nconst oneHour = oneMinute * 60;\nconst oneDay = oneHour * 24;\n\n// TODO: refactor this so it doesn't want to make me tear my eyes out\nconst getRelativeDate = (date: string): string => {\n  const timeDifference = Date.now() - new Date(date).getTime();\n  if (timeDifference < oneMinute) {\n    return 'Just Now';\n  } if (timeDifference < oneHour) {\n    return (timeDifference < (oneMinute * 2)) ? '1 minute ago' : `${Math.floor(timeDifference / oneMinute)} minutes ago`;\n  } if (timeDifference < oneDay) {\n    return (timeDifference < oneHour * 2) ? '1 hour ago' : `${Math.floor(timeDifference / oneHour)} hours ago`;\n  }\n  return (timeDifference < oneDay * 2) ? '1 day ago' : `${Math.floor(timeDifference / oneDay)} days ago`;\n};\n\nconst testables = {\n  getRelativeDate,\n  getAbsoluteDate,\n};\n\nconst TimeContainer = ({ time, relative }: {time: string; relative?: boolean}): ReactElement => {\n  const [content, setContent] = useState<any>(null);\n\n  useEffect(() => {\n    const parsedDate = relative ? getRelativeDate(time) : getAbsoluteDate(time);\n    setContent(parsedDate);\n    if (relative) { // keep relative time fresh\n      setInterval(() => setContent(getRelativeDate(time)), 60000);\n    }\n  }, [setContent, time, relative]);\n\n  return (\n    <p>{content}</p>\n  );\n};\n\nexport default TimeContainer;\n\nexport {\n  testables,\n};\n","import React, { ReactElement } from 'react';\nimport './MedicalLogCard.scss';\nimport { Post } from '../../Services/PostApi/models';\nimport Card from '../../Atoms/Card/Card';\nimport IconContainer from '../../Atoms/IconContainer/IconContainer';\nimport TimeContainer from '../../Atoms/TimeContainer/TimeContainer';\n\n// Todo, wrap @mentions in tags to make them show up as blue\n\nconst MedicalLogCard = ({ post }: {post: Post}): ReactElement => (\n  <Card className=\"public-post\">\n    <div className=\"public-post-top\">\n      <div className=\"public-post-top__name\">\n        <IconContainer username={post.name} />\n        <p>{`${post.name.firstName} ${post.name.lastName}`}</p>\n      </div>\n      <div className=\"public-post-top__date\">\n        <TimeContainer time={post.time} />\n      </div>\n    </div>\n    <p className=\"public-post__content\">{post.content}</p>\n  </Card>\n);\n\nexport default MedicalLogCard;\n","/* eslint-disable no-plusplus */\n/* eslint-disable default-case */\n/* eslint-disable max-len */\n/* eslint-disable object-curly-newline */\nimport { PublicPost, Post } from './models';\n\nconst publicPosts: PublicPost[] = [\n  {\n    id: 4,\n    name: {\n      firstName: 'Enzo',\n      lastName: 'Brooks',\n    },\n    time: new Date().toString(),\n    content: 'Up to one-third of patients experience markers of distress during palliative ventilator withdrawal, study finds',\n    isVenting: false,\n    reacts: { wow: 12, haha: 0, like: 5, sad: 0 },\n  },\n  {\n    id: 3,\n    name: {\n      firstName: 'Chris',\n      lastName: 'Redfield',\n    },\n    time: '2020-06-15T03:40:44.816Z',\n    content: 'Scientists have discovered a population of neurons that control hibernation-like behavior, or torpor, in mice',\n    isVenting: false,\n    reacts: { wow: 0, haha: 0, like: 12, sad: 0 },\n  },\n  {\n    id: 2,\n    name: {\n      firstName: 'Chris',\n      lastName: 'Redfield',\n    },\n    time: '2020-06-14T03:40:44.816Z',\n    content: 'Scientists have discovered a population of neurons that control hibernation-like behavior, or torpor, in mice',\n    isVenting: false,\n    reacts: { wow: 0, haha: 0, like: 12, sad: 0 },\n  },\n  {\n    id: 1,\n    name: {\n      firstName: 'Enzo',\n      lastName: 'Brooks',\n    },\n    time: '2020-06-12T01:30:35.096Z',\n    content: 'Today, @Jerry is officially cancer free!',\n    isVenting: true,\n    reacts: { wow: 0, haha: 0, like: 12, sad: 0 },\n  },\n];\nconst clinicalLogs: Post[] = [\n  {\n    id: 5,\n    name: {\n      firstName: 'Chris',\n      lastName: 'Redfield',\n    },\n    time: '2020-06-12T01:30:35.096Z',\n    content: 'Patient in room 78 blood pressure is 128/70',\n  },\n  {\n    id: 4,\n    name: {\n      firstName: 'Samantha',\n      lastName: 'Yule',\n    },\n    time: '2020-06-12T01:30:35.096Z',\n    content: 'Patient in room 47 is showing decreased signs of self awareness',\n  },\n  {\n    id: 3,\n    name: {\n      firstName: 'Samantha',\n      lastName: 'Yule',\n    },\n    time: '2020-06-12T01:30:35.096Z',\n    content: 'Patient in room 78 blood pressure is 134/96',\n  },\n  {\n    id: 2,\n    name: {\n      firstName: 'Enzo',\n      lastName: 'Brooks',\n    },\n    time: '2020-06-12T01:30:35.096Z',\n    content: 'Patient in room 78 blood pressure is 139/104',\n  },\n  {\n    id: 1,\n    name: {\n      firstName: 'Samantha',\n      lastName: 'Yule',\n    },\n    time: '2020-06-12T01:30:35.096Z',\n    content: 'Patient in room 78 blood pressure is 119/79',\n  },\n];\n\nconst successfulCall = (): boolean => (Math.round(Math.random() * 100)) < 101; // simulating a network failure\n\nexport const addNewClinicalLog = (newPost: Post): Promise<any> => new Promise((resolve) => {\n  clinicalLogs.unshift(newPost);\n  resolve();\n});\n\nexport const addNewPublicPost = (newPost: PublicPost): Promise<any> => new Promise((resolve) => {\n  publicPosts.unshift(newPost);\n  resolve();\n});\n\nexport const addReact = (index: number, reactType: string): Promise<PublicPost[]> => new Promise((resolve) => {\n  switch (reactType) {\n    case 'like':\n      publicPosts[publicPosts.length - index].reacts.like++;\n      break;\n    case 'haha':\n      publicPosts[publicPosts.length - index].reacts.haha++;\n      break;\n    case 'wow':\n      publicPosts[publicPosts.length - index].reacts.wow++;\n      break;\n    case 'sad':\n      publicPosts[publicPosts.length - index].reacts.sad++;\n      break;\n  }\n  resolve(publicPosts);\n});\n\nexport const getPublicPosts = (): Promise<PublicPost[]> => new Promise((resolve, reject) => setTimeout(() => (successfulCall() ? resolve(publicPosts) : reject()), 1000));\n\nexport const getClinicalLog = (): Promise<Post[]> => new Promise((resolve, reject) => setTimeout(() => (successfulCall() ? resolve(clinicalLogs) : reject()), 1000));\n","/* eslint-disable react/no-array-index-key */\nimport React, { useEffect, useState, ReactElement } from 'react';\nimport './ClinicView.scss';\nimport { Button } from '@material-ui/core';\nimport Spinner from '../../Atoms/Spinner/Spinner';\nimport Card from '../../Atoms/Card/Card';\nimport Toolbar from '../../Molecules/Toolbar/Toolbar';\nimport PostForm from '../../Molecules/PostForm/PostForm';\nimport MedicalLogCard from '../../Molecules/MedicalLogCard/MedicalLogCard';\nimport { Post, Name } from '../../Services/PostApi/models';\nimport { getClinicalLog } from '../../Services/PostApi/api';\n\n// A reminder that we don't need to check auth state here\n\nconst ClinicView = (): ReactElement => {\n  const [clinicLogs, setClinicLogs] = useState<Post[] | null>(null);\n  const [error, setError] = useState<string | null>(null);\n\n  const getPosts = (): void => {\n    getClinicalLog()\n      .then((posts: Post[]) => setClinicLogs(posts))\n      .catch(() => setError('Failed to load posts'));\n  };\n\n  const publishNewPost = (postContent: any): void => {\n    const userDetails: Name = {\n      firstName: 'Chris', lastName: 'Redfield',\n    };\n    const newLog: Post = {\n      id: clinicLogs ? clinicLogs[0].id + 1 : 1, // there should always be a value at this point\n      content: postContent.postContent,\n      name: userDetails,\n      time: new Date().toISOString(),\n    };\n\n    // eslint-disable-next-line no-unused-expressions\n    clinicLogs && setClinicLogs([newLog, ...clinicLogs]);\n  };\n\n  useEffect(() => {\n    getPosts();\n  }, []);\n\n  return error ? (\n    <Card>\n      {error}\n      {' '}\n      <Button variant=\"outlined\" color=\"secondary\" onClick={getPosts}>Try Again</Button>\n    </Card>\n  )\n    : (\n      <div className=\"clinic-container\">\n        <h2>Authed Toolbar</h2>\n        <Toolbar location=\"clinic\" />\n        <h2>Something to say?</h2>\n        <PostForm onSubmitParent={publishNewPost} />\n        <h2>Clincal Logs</h2>\n        { clinicLogs\n          ? (\n            <div className=\"post-container\">\n              {clinicLogs && clinicLogs.map((post: Post, index) => <MedicalLogCard key={`post_${index}`} post={post} />)}\n            </div>\n          )\n          : <Spinner />}\n      </div>\n    );\n};\n\nexport default ClinicView;\n","import React, { ReactElement, SyntheticEvent } from 'react';\nimport './ReactComponent.scss';\nimport { IconButton } from '@material-ui/core';\nimport {\n  ThumbUp, SentimentVeryDissatisfied, TagFaces, Hotel,\n} from '@material-ui/icons';\nimport { Reacts } from '../../Services/PostApi/models';\n\nconst ReactComponent = (props: {reacts: Reacts; reactHandler: Function}): ReactElement => {\n  const { reacts, reactHandler } = props;\n\n  return (\n    <div className=\"reacts\">\n      <IconButton\n        className=\"react-entity\"\n        color=\"primary\"\n        id=\"like\"\n        onClick={(e: SyntheticEvent): void => {\n          e.preventDefault();\n          reactHandler('like');\n        }}\n      >\n        <ThumbUp color=\"secondary\" />\n        <p>{reacts.like}</p>\n      </IconButton>\n\n      <IconButton\n        className=\"react-entity\"\n        color=\"primary\"\n        id=\"haha\"\n        onClick={(e: SyntheticEvent): void => {\n          e.preventDefault();\n          reactHandler('haha');\n        }}\n      >\n        <TagFaces color=\"secondary\" />\n        <p>{reacts.haha}</p>\n      </IconButton>\n\n      <IconButton\n        className=\"react-entity\"\n        color=\"primary\"\n        id=\"wow\"\n        onClick={(e: SyntheticEvent): void => {\n          e.preventDefault();\n          reactHandler('wow');\n        }}\n      >\n        <Hotel color=\"secondary\" />\n        <p>{reacts.wow}</p>\n      </IconButton>\n\n      <IconButton\n        className=\"react-entity\"\n        color=\"primary\"\n        id=\"sad\"\n        onClick={(e: SyntheticEvent): void => {\n          e.preventDefault();\n          reactHandler('sad');\n        }}\n      >\n        <SentimentVeryDissatisfied color=\"secondary\" />\n        <p>{reacts.sad}</p>\n      </IconButton>\n    </div>\n  );\n};\n\nexport default ReactComponent;\n","import React, { ReactElement } from 'react';\nimport './PublicPostCard.scss';\nimport { PublicPost } from '../../Services/PostApi/models';\nimport Card from '../../Atoms/Card/Card';\nimport IconContainer from '../../Atoms/IconContainer/IconContainer';\nimport TimeContainer from '../../Atoms/TimeContainer/TimeContainer';\nimport ReactComponent from '../../Atoms/ReactComponent/ReactComponent';\n\n// Todo, wrap @mentions in tags to make them show up as blue\n\nconst PublicPostCard = (props: {post: PublicPost; clickHandler: Function}): ReactElement => {\n  const { post, clickHandler } = props;\n\n  const ventString = 'I\\'m just venting';\n\n  const mapReactEvent = (eventType: string): void => {\n    clickHandler({ eventType, id: post.id });\n  };\n\n  return (\n    <Card className=\"public-post\">\n      <div className=\"public-post-top\">\n        <div className=\"public-post-top__name\">\n          <IconContainer username={post.name} />\n          <p>{`${post.name.firstName} ${post.name.lastName}`}</p>\n        </div>\n        <div className=\"public-post-top__date\">\n          <TimeContainer time={post.time} relative />\n          {post.isVenting && <p>{ventString}</p>}\n        </div>\n      </div>\n      <p className=\"public-post__content\">{post.content}</p>\n      <ReactComponent reacts={post.reacts} reactHandler={mapReactEvent} />\n    </Card>\n  );\n};\n\nexport default PublicPostCard;\n","/* eslint-disable react/no-array-index-key */\nimport React, {\n  useEffect, useState, ReactElement, useContext,\n} from 'react';\nimport './NewsfeedView.scss';\nimport { Button } from '@material-ui/core';\nimport Spinner from '../../Atoms/Spinner/Spinner';\nimport Card from '../../Atoms/Card/Card';\nimport PublicPostCard from '../../Molecules/PublicPostCard/PublicPostCard';\nimport Toolbar from '../../Molecules/Toolbar/Toolbar';\nimport PostForm from '../../Molecules/PostForm/PostForm';\nimport { AuthContext } from '../../Store/Store';\nimport { getPublicPosts, addNewPublicPost, addReact } from '../../Services/PostApi/api';\nimport { PublicPost, Name, Reacts } from '../../Services/PostApi/models';\n\nconst NewsfeedView = (): ReactElement => {\n  const [publicPosts, setPublicPosts] = useState<PublicPost[] | null>(null);\n  const [error, setError] = useState<string | null>(null);\n  const [authState] = useContext(AuthContext);\n\n  const getPosts = (): void => {\n    getPublicPosts()\n      .then((posts: PublicPost[]) => setPublicPosts(posts))\n      .catch(() => setError('Failed to load posts'));\n  };\n\n  const publishNewPost = (postContent: any): void => {\n    const userDetails: Name = {\n      firstName: 'Chris', lastName: 'Redfield',\n    };\n    const emptyReacts: Reacts = {\n      like: 0, haha: 0, wow: 0, sad: 0,\n    };\n    const newPost: PublicPost = {\n      id: publicPosts ? publicPosts[0].id + 1 : 1, // there should always be a value at this point\n      content: postContent.postContent,\n      isVenting: postContent.ventCheckbox,\n      name: userDetails,\n      time: new Date().toISOString(),\n      reacts: emptyReacts,\n    };\n    if (publicPosts) {\n      setPublicPosts([newPost, ...publicPosts]);\n    } else {\n      setPublicPosts([newPost]);\n    }\n    addNewPublicPost(newPost);\n  };\n\n  const postNewReact = async (reactEvent: { eventType: string; id: number }): Promise<void> => {\n    const response = await addReact(reactEvent.id, reactEvent.eventType);\n    setPublicPosts(null); // I honestly don't know why this works but the state doesn't update otherwise\n    setPublicPosts(response);\n  };\n\n  useEffect(() => {\n    if (!publicPosts) {\n      getPosts();\n    }\n  }, [publicPosts]);\n\n  // TODO find a better way to handle errors than nested statements\n  // TODO make global error panel\n  return error\n    ? (\n      <Card>\n        {error}\n        {' '}\n        <Button variant=\"outlined\" color=\"secondary\" onClick={getPosts}>Try Again</Button>\n      </Card>\n    )\n    : (\n      <div className=\"newsfeed-container\">\n        { authState.isAuthed && (\n          <>\n            <h2>Authed Toolbar</h2>\n            <Toolbar location=\"newsfeed\" />\n            <h2>Something to say?</h2>\n            <PostForm onSubmitParent={publishNewPost} isPublic />\n          </>\n        )}\n        <h2>Newsfeed</h2>\n        { publicPosts\n          ? (\n            <div className=\"post-container\">\n              {publicPosts && publicPosts.map(\n                (post: PublicPost, index) => <PublicPostCard key={`post_${index}`} post={post} clickHandler={postNewReact} />,\n              )}\n            </div>\n          )\n          : <Spinner />}\n      </div>\n    );\n};\n\nexport default NewsfeedView;\n","/* eslint-disable react/jsx-props-no-spreading */\nimport React, { useContext, ReactElement } from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { AuthContext } from '../Store/Store';\n\n// TODO: find a better way to implement private routes than playing the assignment game\n\nconst PrivateRoute = (props: any): ReactElement => {\n  const { component, ...rest } = props;\n  const Component = component;\n  const [authContext] = useContext(AuthContext);\n\n  return (\n    <Route\n      {...rest}\n      render={(innerProps): ReactElement => (\n        authContext.isAuthed === true\n          ? <Component {...innerProps} />\n          : <Redirect to=\"/newsfeed\" />\n      )}\n    />\n  );\n};\n\nexport default PrivateRoute;\n","import React, { ReactElement } from 'react';\nimport {\n  Switch,\n  Route,\n  HashRouter,\n  Redirect,\n} from 'react-router-dom';\n\n\nimport ClinicView from '../Organisms/ClinicView/ClinicView';\nimport NewsfeedView from '../Organisms/NewsfeedView/NewsfeedView';\nimport PrivateRoute from './PrivateRoute';\n\nconst Router = (): ReactElement => (\n  <HashRouter basename=\"/\">\n    <Switch>\n      <PrivateRoute path=\"/clinic\" component={ClinicView} />\n      <Route path=\"/newsfeed\" component={NewsfeedView} />\n      <Route path=\"/*\" exact>\n        <Redirect to=\"/newsfeed\" />\n      </Route>\n    </Switch>\n  </HashRouter>\n);\n\n\nexport default Router;\n","import React, { ReactElement } from 'react';\nimport './App.scss';\n\nimport Footer from '../../Molecules/Footer/Footer';\nimport Header from '../../Molecules/Header/Header';\nimport Router from '../../Router/Router';\nimport Store from '../../Store/Store';\n\nconst App = (): ReactElement => (\n  <div className=\"app-container\">\n    <Store>\n      <Header />\n      <section className=\"app\">\n        <Router />\n      </section>\n      <Footer />\n    </Store>\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    // TODO: https://github.com/facebook/create-react-app/issues/8863\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.href,\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './Organisms/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}